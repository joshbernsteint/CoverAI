openapi: 3.0.0
info:
  title: CoverAI API
  version: 1.0.0
  description: CoverAI API Documentation
servers:
  - url: https://cover-ai-server-three.vercel.app/
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ResumeData:
      type: object
      properties:
        userId:
          type: string
          description: The ID of the user
        resumeType:
          type: string
          description: 'The type of the resume (e.g., "pdf")'
        extractedText:
          type: string
          description: The extracted text from the resume
        extractedSections:
          type: array
          items:
            type: string
          description: Array of extracted sections from the resume
        pdfJSON:
          type: object
          properties:
            name:
              type: string
              description: The name of the user
            email:
              type: string
              format: email
              description: The email address of the user
            phone:
              type: string
              description: The phone number of the user
          additionalProperties: true
          description: Additional JSON data related to the PDF
    Cover Letter:
      type: object
      required:
        - user_id
        - company_name
        - date
        - paragraphs
      properties:
        user_id:
          type: string
          description: Unique identifier for the User, as generated by an external system (e.g., Clerk).
        company_name:
          type: string
          description: Name of the company.
        date:
          type: string
          format: date
          description: The date when the cover letter was created.
        paragraphs:
          type: array
          description: Array of paragraphs that make up the cover letter.
          items:
            type: string
      example:
        user_id: "1234567890abcdef"
        company_name: "Acme Corp"
        date: "2023-04-01"
        paragraphs:
          - "Dear Hiring Team at Acme,"
          - "I am writing to express my interest in the job title position at company name."
          - "Based on my previous experience and skills, I am confident that I would be a great addition to your team."
          - "Thank you for considering my application. I look forward to the opportunity to discuss how I can contribute to your team."
          - "Sincerely, John Doe"
    User:
      type: object
      required:
        - first_name
        - last_name
      properties:
        _id:
          type: string
          description: Unique identifier for the User, generated by Clerk.
        first_name:
          type: string
          description: First name of the User.
        last_name:
          type: string
          description: Last name of the User.
        skills:
          type: array
          description: List of skills associated with the User.
          items:
            type: string
        settings:
          type: object
          description: User settings.
          properties:
            dark_mode:
              type: boolean
              description: Indicates if dark mode is enabled.
            suggest_cl:
              type: boolean
              description: Indicates if suggesting cover letters is enabled.
            auto_download_cl:
              type: boolean
              description: Indicates if automatic downloading of cover letters is enabled.
            save_resumes:
              type: boolean
              description: Indicates if saving resumes is enabled.
            save_cl:
              type: boolean
              description: Indicates if saving cover letters is enabled.
      example:
        _id: "unique-user-id"
        first_name: "John"
        last_name: "Doe"
        skills: ["JavaScript", "React"]
        settings:
          dark_mode: false
          suggest_cl: false
          auto_download_cl: false
          save_resumes: false
          save_cl: false
paths:
  /covers/genCoverLetter:
    post:
      summary: Generates a personalized cover letter for a user
      description: >
        This endpoint accepts details about a job application and, optionally, the user's resume and scraped job data,
        to generate a personalized cover letter. The cover letter is tailored based on the user's previous cover letters,
        educational background, experiences, and the specifics of the job being applied for.
      tags:
        - Cover Letters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                company_name:
                  type: string
                  description: The name of the company.
                  example: "Acme Corp"
                job_title:
                  type: string
                  description: The title of the job position.
                  example: "Software Engineer"
                useResume:
                  type: boolean
                  description: Flag indicating whether to use the user's resume data.
                  example: false
                resumeData:
                  type: object
                  description: >
                    An object containing the user's resume data, including extracted sections and PDF JSON data.
                    This parameter is optional and only used if useResume is true.
                useScraper:
                  type: boolean
                  description: Flag indicating whether to use scraped job data.
                  example: true
                scrapedData:
                  type: string
                  description: >
                    A string containing scraped data about the job. This parameter is optional and only used if useScraper is true.
                  example: "Details about the job responsibilities and requirements."
      responses:
        "200":
          description: Cover letter generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: The unique identifier for the cover letter.
                  user_id:
                    type: string
                    format: uuid
                    description: The unique identifier for the user.
                  date:
                    type: string
                    format: date
                    description: The date when the cover letter was generated.
                  company_name:
                    type: string
                    description: The name of the company or the company to which the cover letter is addressed.
                  paragraphs:
                    type: array
                    items:
                      type: string
                    description: The updated paragraphs of the cover letter.
                example:
                  _id: "623d6e9d9e2b6f001f2f5c7d"
                  user_id: "user_2dC6mNNpMcxT5kubchWOsfUs2TB"
                  date: "2024-03-04"
                  company_name: "Acme Corp"
                  paragraphs:
                    - "Dear Hiring Team at Acme,"
                    - "I am excited to apply for the Software Engineer position at Acme Corp..."
                    - "With my experience in software development..."
                    - "I believe my skills make me a perfect fit for this role..."
                    - "Thank you for considering my application."
                    - "Sincerely, John Doe"
        "400":
          description: Bad request. Invalid input or missing fields.
        "401":
          description: Unauthorized. User is not authenticated.
        "404":
          description: Not found. Cover letter with the given ID does not exist.
        "500":
          description: Internal server error.
  /covers/updateCoverLetter:
    patch:
      summary: Updates a specific cover letter
      description: >
        This endpoint updates an existing cover letter's content with the new description provided. It requires the cover letter ID and the new paragraphs as input.
      operationId: updateCoverLetter
      tags:
        - Cover Letters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cover_id
                - description
              properties:
                cover_id:
                  type: string
                  description: The unique identifier of the cover letter to be updated.
                description:
                  type: array
                  items:
                    type: string
                  description: The new paragraphs of the cover letter, including a greeting, at least three body paragraphs, a closing statement, and a signature.
              example:
                cover_id: "623d6e9d9e2b6f001f2f5c7d"
                description:
                  - "Dear Hiring Team at Acme,"
                  - "I am excited to apply for the Software Engineer position at Acme Corp..."
                  - "With my experience in software development..."
                  - "I believe my skills make me a perfect fit for this role..."
                  - "Thank you for considering my application."
                  - "Sincerely, John Doe"
      responses:
        "200":
          description: Successfully updated cover letter
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: The unique identifier for the cover letter.
                  user_id:
                    type: string
                    format: uuid
                    description: The unique identifier for the user.
                  date:
                    type: string
                    format: date
                    description: The date when the cover letter was generated.
                  company_name:
                    type: string
                    description: The name of the company or the company to which the cover letter is addressed.
                  paragraphs:
                    type: array
                    items:
                      type: string
                    description: The updated paragraphs of the cover letter.
                example:
                  _id: "623d6e9d9e2b6f001f2f5c7d"
                  user_id: "user_2dC6mNNpMcxT5kubchWOsfUs2TB"
                  date: "2024-03-04"
                  company_name: "Acme Corp"
                  paragraphs:
                    - "Dear Hiring Team at Acme,"
                    - "I am excited to apply for the Software Engineer position at Acme Corp..."
                    - "With my experience in software development..."
                    - "I believe my skills make me a perfect fit for this role..."
                    - "Thank you for considering my application."
                    - "Sincerely, John Doe"
        "400":
          description: Bad request. Invalid input or missing fields.
        "401":
          description: Unauthorized. User is not authenticated.
        "404":
          description: Not found. Cover letter with the given ID does not exist.
        "500":
          description: Internal server error.
  /covers/getAllCoverLetters:
    get:
      summary: Retrieves all cover letters from a user
      description: >
        This endpoint fetches all cover letters associated with a user, identified by their user ID.
      operationId: getAllCoverLetters
      tags:
        - Cover Letters
      responses:
        "200":
          description: Successfully retrieved all cover letters
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The unique identifier for the cover letter.
                    user_id:
                      type: string
                      format: uuid
                      description: The unique identifier for the user.
                    date:
                      type: string
                      format: date
                      description: The date when the cover letter was generated.
                    company_name:
                      type: string
                      description: The name of the company or the company to which the cover letter is addressed.
                    paragraphs:
                      type: array
                      items:
                        type: string
                      description: An array containing the paragraphs of the cover letter, including a greeting, at least three body paragraphs, a closing statement, and a signature.
              example:
                - _id: "623d6e9d9e2b6f001f2f5c7d"
                  user_id: "user_2dC6mNNpMcxT5kubchWOsfUs2TB"
                  date: "2024-03-04"
                  company_name: "Acme Corp"
                  paragraphs:
                    - "Dear Hiring Team at Acme,"
                    - "I am excited to apply for the Software Engineer position at Acme Corp..."
                    - "With my experience in software development..."
                    - "I believe my skills make me a perfect fit for this role..."
                    - "Thank you for considering my application."
                    - "Sincerely, John Doe"
        "401":
          description: Unauthorized. User is not authenticated.
        "500":
          description: Internal server error.
  /covers/getCoverLetterById/{id}:
    get:
      summary: Retrieves a specific cover letter by ID
      description: >
        This endpoint fetches a specific cover letter using its unique identifier provided as a path parameter.
      operationId: getCoverLetterById
      tags:
        - Cover Letters
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The unique identifier of the cover letter to retrieve.
      responses:
        "200":
          description: Successfully retrieved cover letter
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: The unique identifier for the cover letter.
                  user_id:
                    type: string
                    format: uuid
                    description: The unique identifier for the user.
                  date:
                    type: string
                    format: date
                    description: The date when the cover letter was generated.
                  company_name:
                    type: string
                    description: The name of the company or the company to which the cover letter is addressed.
                  paragraphs:
                    type: array
                    items:
                      type: string
                    description: The paragraphs of the cover letter, including a greeting, at least three body paragraphs, a closing statement, and a signature.
                example:
                  _id: "623d6e9d9e2b6f001f2f5c7d"
                  user_id: "user_2dC6mNNpMcxT5kubchWOsfUs2TB"
                  date: "2024-03-04"
                  company_name: "Acme Corp"
                  paragraphs:
                    - "Dear Hiring Team at Acme,"
                    - "I am excited to apply for the Software Engineer position at Acme Corp..."
                    - "With my experience in software development..."
                    - "I believe my skills make me a perfect fit for this role..."
                    - "Thank you for considering my application."
                    - "Sincerely, John Doe"
        "400":
          description: Bad request. Invalid input or missing fields.
        "404":
          description: Not found. Cover letter with the given ID does not exist.
        "500":
          description: Internal server error.
  /skills:
    get:
      summary: Retrieve the skills of the authenticated user.
      description: This endpoint retrieves the current user's skills. Authentication is required.
      tags:
        - Users
      responses:
        "200":
          description: An array of skills for the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  skills:
                    type: array
                    items:
                      type: string
    post:
      summary: Update the skills of the authenticated user.
      description: This endpoint updates the current user's skills. Authentication is required.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skills:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: The updated skills of the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  skills:
                    type: array
                    items:
                      type: string

  /settings:
    get:
      summary: Retrieve the settings of the authenticated user.
      description: This endpoint retrieves the current user's settings. Authentication is required.
      tags:
        - Users
      responses:
        "200":
          description: An object containing the user's settings.
          content:
            application/json:
              schema:
                type: object
                properties:
                  settings:
                    type: object
    post:
      summary: Update the settings of the authenticated user.
      description: This endpoint updates the current user's settings. Authentication is required.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                settings:
                  type: object
      responses:
        "200":
          description: The updated settings of the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  settings:
                    type: object
    delete:
      summary: Reset the settings of the authenticated user to defaults.
      description: This endpoint resets the current user's settings to default values. Authentication is required.
      tags:
        - Users
      responses:
        "200":
          description: The reset settings of the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  settings:
                    type: object

  /resumes/manual:
    post:
      summary: Create Resume from JSON
      tags:
        - Resumes
      security:
        - bearerAuth: []
      requestBody:
        description: JSON data for resume
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResumeData"
      responses:
        "200":
          description: Successfully created resume
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResumeData"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
  /resumes:
    post:
      summary: Upload PDF to create resume
      tags:
        - Resumes
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: PDF file to upload
      responses:
        "200":
          description: Successfully created resume
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResumeData"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
  /resumes/all:
    get:
      summary: Get all resumes by user ID
      tags:
        - Resumes
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of resumes belonging to the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResumeData"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
  /resumes/{id}:
    get:
      summary: Get Resume by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      tags:
        - Resumes
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Retrieved resume
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResumeData"
        "404":
          description: Resume not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
    put:
      summary: Update a resume by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Resume ID
      tags:
        - Resumes
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResumeData"
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: PDF file to upload
      responses:
        "200":
          description: Resume updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResumeData"
        "400":
          description: Bad request
          content: applic
    delete:
      summary: Delete a resume by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Resume ID
      tags:
        - Resumes
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Resume deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        "404":
          description: Resume not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
