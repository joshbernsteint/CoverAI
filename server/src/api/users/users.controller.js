import { Router } from "express";
const router = Router();
import { ClerkExpressRequireAuth } from "@clerk/clerk-sdk-node";
import * as userService from "./users.service.js";
import { UnexpectedError } from "../../utils/errors.js";

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - first_name
 *         - last_name
 *       properties:
 *         _id:
 *           type: string
 *           description: Unique identifier for the User, generated by Clerk.
 *         first_name:
 *           type: string
 *           description: First name of the User.
 *         last_name:
 *           type: string
 *           description: Last name of the User.
 *         skills:
 *           type: array
 *           description: List of skills associated with the User.
 *           items:
 *             type: string
 *         settings:
 *           type: object
 *           description: User settings.
 *           properties:
 *             dark_mode:
 *               type: boolean
 *               description: Indicates if dark mode is enabled.
 *             suggest_cl:
 *               type: boolean
 *               description: Indicates if suggesting cover letters is enabled.
 *             auto_download_cl:
 *               type: boolean
 *               description: Indicates if automatic downloading of cover letters is enabled.
 *             save_resumes:
 *               type: boolean
 *               description: Indicates if saving resumes is enabled.
 *             save_cl:
 *               type: boolean
 *               description: Indicates if saving cover letters is enabled.
 *       example:
 *         _id: "unique-user-id"
 *         first_name: "John"
 *         last_name: "Doe"
 *         skills: ["JavaScript", "React"]
 *         settings:
 *           dark_mode: false
 *           suggest_cl: false
 *           auto_download_cl: false
 *           save_resumes: false
 *           save_cl: false
 */

/**
 * @swagger
 * /skills:
 *   get:
 *     summary: Retrieve the skills of the authenticated user.
 *     description: This endpoint retrieves the current user's skills. Authentication is required.
 *     security:
 *       - clerkAuth: []
 *     tags:
 *       - Users
 *     responses:
 *       200:
 *         description: An array of skills for the user.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 skills:
 *                   type: array
 *                   items:
 *                     type: string
 *   post:
 *     summary: Update the skills of the authenticated user.
 *     description: This endpoint updates the current user's skills. Authentication is required.
 *     security:
 *       - clerkAuth: []
 *     tags:
 *       - Users
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               skills:
 *                 type: array
 *                 items:
 *                   type: string
 *     responses:
 *       200:
 *         description: The updated skills of the user.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 skills:
 *                   type: array
 *                   items:
 *                     type: string
 *
 */

/** @swagger
 * /settings:
 *   get:
 *     summary: Retrieve the settings of the authenticated user.
 *     description: This endpoint retrieves the current user's settings. Authentication is required.
 *     security:
 *       - clerkAuth: []
 *     tags:
 *       - Users
 *     responses:
 *       200:
 *         description: An object containing the user's settings.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 settings:
 *                   type: object
 *   post:
 *     summary: Update the settings of the authenticated user.
 *     description: This endpoint updates the current user's settings. Authentication is required.
 *     security:
 *       - clerkAuth: []
 *     tags:
 *       - Users
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               settings:
 *                 type: object
 *     responses:
 *       200:
 *         description: The updated settings of the user.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 settings:
 *                   type: object
 *   delete:
 *     summary: Reset the settings of the authenticated user to defaults.
 *     description: This endpoint resets the current user's settings to default values. Authentication is required.
 *     security:
 *       - clerkAuth: []
 *     tags:
 *       - Users
 *     responses:
 *       200:
 *         description: The reset settings of the user.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 settings:
 *                   type: object
 */

router
  .route("/skills")
  .get(ClerkExpressRequireAuth, async function (req, res) {
    try {
      const user_id = req.auth.sessionClaims.sub;
      const skills = await userService.getSkills(user_id);
      res.json({ skills });
    } catch (err) {
      next(err);
    }
  })
  .post(ClerkExpressRequireAuth, async function (req, res) {
    try {
      const user_id = req.auth.sessionClaims.sub;
      const { skills } = req.body;
      const updatedUser = await userService.setSkills(user_id, skills);
      res.json({ skills: updatedUser.skills });
    } catch (err) {
      next(err);
    }
  });

router
  .route("/settings")
  .get(ClerkExpressRequireAuth, async function (req, res) {
    try {
      const user_id = req.auth.sessionClaims.sub;
      const settings = await userService.getSettings(user_id);
      res.json({ settings });
    } catch (err) {
      console.error(err);
      next(err);
    }
  })
  .post(ClerkExpressRequireAuth, async function (req, res) {
    try {
      const user_id = req.auth.sessionClaims.sub;
      const { settings } = req.body;
      const updatedUser = await userService.setSettings(user_id, settings);
      res.json({ settings: updatedUser.settings });
    } catch (err) {
      next(err);
    }
  })
  .delete(ClerkExpressRequireAuth, async function (req, res) {
    try {
      const user_id = req.auth.sessionClaims.sub;
      const updatedUser = await userService.resetSettings(user_id);
      res.json({ settings: updatedUser.settings });
    } catch (err) {
      next(err);
    }
  });

export default router;
